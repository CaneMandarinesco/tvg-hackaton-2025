import os
import pprint as pp


class Solution:

    inputFolder = os.path.join("soluzioni", "input", "3")
    outputFolder = os.path.join("soluzioni", "output", "3")
    X, Y = 0, 0

    def palindroma(L):
        ciao = len(L)
        for x in range(int(ciao/2)):
            if L[x] != L[ciao-x-1]: return False
        return True

    def l(matrix, y, x, k, start):
        L = []
        x1, y1 = x, y
        while k > 0:
            if x1 < 0: return False
            L.append(matrix[y][x1])
            x1 -= 1
            k -= 1
        return Solution.palindroma(L)

    def lu(matrix, y, x, k, start):
        L = []
        x1, y1 = x, y
        while k > 0:
            if x1 < 0 or y1 < 0: return False
            L.append(matrix[y1][x1])
            x1 -= 1
            y1 -= 1
            k -= 1
        return Solution.palindroma(L)

    def u(matrix, y, x, k, start):
        L = []
        x1, y1 = x, y
        while k > 0:
            if y1 < 0: return False
            L.append(matrix[y1][x])
            y1 -= 1
            k -= 1
        return Solution.palindroma(L)

    def ru(matrix, y, x, k, start):
        L = []
        y1, x1 = y, x
        while k > 0:
            if x1 >= Solution.X or y1 < 0: return False
            L.append(matrix[y1][x1])
            x1 += 1
            y1 -= 1
            k -= 1
        return Solution.palindroma(L)

    @staticmethod
    def solve(matrix: list[list[int]], k: int, start: str) -> int:
        """
        Scrivi la tua soluzione qui
        """
        Solution.Y = len(matrix)
        Solution.X = len(matrix[0])
        n = 0

        for y in range(Solution.Y):    
            for x in range(Solution.X):
                if matrix[y][x] == start:
                    if (Solution.l(matrix, y, x, k, start)): 
                        n += 1
                    if(Solution.lu(matrix, y, x, k, start)):
                        n += 1
                    if(Solution.u(matrix, y, x, k, start)):
                        n += 1
                    if(Solution.ru(matrix, y, x, k, start)):
                        n += 1
        return n
                            
    @staticmethod
    def loadInput(i: int) -> str:
        """
        Carica il file di input i-esimo, contenuto all'interno della cartella dei file input.
        Questo metodo deve restituire il valore da passare al metodo solve.
        """
        files = os.listdir(Solution.inputFolder)
        files.sort()

        matrix = []
        with open(os.path.join(Solution.inputFolder, files[i])) as file:
            for i, line in enumerate(file):
                if i == 0:
                    len, key = line.strip().split(",")
                else:
                    newLine = []
                    for char in line.strip():
                        newLine.append(char)
                    matrix.append(newLine)
        return matrix, int(len), key

    @staticmethod
    def loadOutput(i: int) -> int:
        """
        Carica il file di output i-esimo, contenuto all'interno della cartella dei file output.
        Questo metodo deve restituire il valore presente nel file di output.
        """
        files = os.listdir(Solution.outputFolder)
        files.sort()

        with open(os.path.join(Solution.outputFolder, files[i])) as file:
            value = ""
            for line in file:
                value += line.strip()
        return int(value)
